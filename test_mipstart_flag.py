#!/usr/bin/env python
"""Direct test to verify -mipstart flag is generated by CBC when use_warmstart=True.

This test uses BaseOptimizationModel directly to isolate the warmstart flag issue.
"""

import sys
import re
from pyomo.environ import ConcreteModel, Var, Objective, Constraint, Binary, minimize

# Use the BaseOptimizationModel class
from src.optimization.base_model import BaseOptimizationModel


class SimpleTestModel(BaseOptimizationModel):
    """Simple MIP for testing warmstart."""

    def build_model(self):
        model = ConcreteModel()

        # Binary variables
        model.x1 = Var(within=Binary)
        model.x2 = Var(within=Binary)
        model.x3 = Var(within=Binary)

        # Objective
        model.obj = Objective(expr=model.x1 + 2*model.x2 + 3*model.x3, sense=minimize)

        # Constraint
        model.con1 = Constraint(expr=model.x1 + model.x2 + model.x3 >= 1)

        return model

    def extract_solution(self, model):
        from pyomo.environ import value
        return {
            'x1': value(model.x1),
            'x2': value(model.x2),
            'x3': value(model.x3),
            'obj': value(model.obj),
        }


def test_with_warmstart_flag():
    """Test solve with use_warmstart=True."""
    print("="*80)
    print("TESTING CBC WARMSTART FLAG WITH use_warmstart=True")
    print("="*80)

    model = SimpleTestModel()

    # Build model first to set warmstart values
    pyomo_model = model.build_model()

    # Set warmstart values (like Stack Exchange example)
    pyomo_model.x1 = 1
    pyomo_model.x2 = 0
    pyomo_model.x3 = 0

    print(f"\nWarmstart values: x1=1, x2=0, x3=0")

    # Now solve with use_warmstart=True (this should pass warmstart=True to Pyomo)
    print("\nSolving with use_warmstart=True...")
    result = model.solve(
        solver_name='cbc',
        use_warmstart=True,  # THIS SHOULD GENERATE -mipstart FLAG
        tee=True,  # Show solver output
    )

    print(f"\nResult: {result.termination_condition}")
    print(f"Solution: {model.get_solution()}")

    return True  # If we get here without crash, test passes


def test_without_warmstart_flag():
    """Test solve with use_warmstart=False (default)."""
    print("\n" + "="*80)
    print("TESTING CBC WITHOUT WARMSTART (use_warmstart=False)")
    print("="*80)

    model = SimpleTestModel()
    pyomo_model = model.build_model()

    # Set values but DON'T enable warmstart
    pyomo_model.x1 = 1
    pyomo_model.x2 = 0
    pyomo_model.x3 = 0

    print("\nSolving with use_warmstart=False (default)...")
    result = model.solve(
        solver_name='cbc',
        use_warmstart=False,  # Should NOT generate -mipstart
        tee=True,
    )

    print(f"\nResult: {result.termination_condition}")

    return True


if __name__ == "__main__":
    print("\n" + "#"*80)
    print("# CBC -mipstart FLAG VERIFICATION")
    print("#"*80)

    print("\nExpected: First test shows '-mipstart' in CBC command line")
    print("Expected: Second test does NOT show '-mipstart'\n")

    try:
        # Test 1: WITH warmstart
        test_with_warmstart_flag()

        # Test 2: WITHOUT warmstart
        test_without_warmstart_flag()

        print("\n" + "#"*80)
        print("# CHECK OUTPUT ABOVE FOR '-mipstart' FLAG")
        print("#"*80)
        print("\nLook for 'command line - /usr/bin/cbc ... -mipstart ...' in first test")
        print("And NO -mipstart in second test")

    except Exception as e:
        print(f"\n\nERROR: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
