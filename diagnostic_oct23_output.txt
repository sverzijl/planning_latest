============================= test session starts ==============================
platform linux -- Python 3.11.2, pytest-8.4.2, pluggy-1.6.0 -- /home/sverzijl/planning_latest/venv/bin/python3
cachedir: .pytest_cache
rootdir: /home/sverzijl/planning_latest
plugins: cov-7.0.0, mock-3.15.1
collecting ... collected 1 item

tests/test_production_run_oct16_4weeks.py::test_exact_user_scenario_oct16_4weeks 
================================================================================
REPRODUCTION TEST: User's Oct 16 4-Week Production Run
================================================================================

Scenario Setup:
  Start: 2025-10-23
  End: 2025-11-19
  Horizon: 28 days
  MIP Gap: 2%
  Allow shortages: True
  Batch tracking: True
FAILED

=================================== FAILURES ===================================
____________________ test_exact_user_scenario_oct16_4weeks _____________________

    def test_exact_user_scenario_oct16_4weeks():
        """Reproduce exact user scenario and gather diagnostic evidence."""
    
        print("\n" + "="*80)
        print("REPRODUCTION TEST: User's Oct 16 4-Week Production Run")
        print("="*80)
    
        # Load exact files user used
        data_dir = Path(__file__).parent.parent / "data" / "examples"
    
        parser = MultiFileParser(
            forecast_file=str(data_dir / "Gluten Free Forecast - Latest.xlsm"),
            network_file=str(data_dir / "Network_Config.xlsx"),
            inventory_file=str(data_dir / "inventory_latest.XLSX"),
        )
    
        forecast, locations, routes, labor_calendar, trucks_list, costs = parser.parse_all()
    
        # Get manufacturing site
        manufacturing_site = next((loc for loc in locations if loc.type == LocationType.MANUFACTURING), None)
        assert manufacturing_site is not None, "No manufacturing site found"
    
        # Convert to unified
        converter = LegacyToUnifiedConverter()
        nodes = converter.convert_nodes(manufacturing_site, locations, forecast)
        unified_routes = converter.convert_routes(routes)
        unified_trucks = converter.convert_truck_schedules(trucks_list, manufacturing_site.id)
    
        # Parse inventory using parser method (like working test does)
        inventory_snapshot = parser.parse_inventory(snapshot_date=None)  # Will use date from file
        initial_inventory = inventory_snapshot
        inventory_snapshot_date = inventory_snapshot.snapshot_date if inventory_snapshot else None
    
        # Exact user settings
        start_date = date(2025, 10, 23)
        end_date = date(2025, 11, 19)  # 4 weeks = 28 days
    
        print(f"\nScenario Setup:")
        print(f"  Start: {start_date}")
        print(f"  End: {end_date}")
        print(f"  Horizon: {(end_date - start_date).days + 1} days")
        print(f"  MIP Gap: 2%")
        print(f"  Allow shortages: True")
        print(f"  Batch tracking: True")
    
        # Build model with exact user settings
>       model_wrapper = UnifiedNodeModel(
            nodes=nodes,
            routes=unified_routes,
            forecast=forecast,
            labor_calendar=labor_calendar,
            cost_structure=costs,
            start_date=start_date,
            end_date=end_date,
            truck_schedules=unified_trucks,
            initial_inventory=initial_inventory,
            inventory_snapshot_date=inventory_snapshot_date,
            use_batch_tracking=True,
            allow_shortages=True,
            enforce_shelf_life=True,
            force_all_skus_daily=False,
        )

tests/test_production_run_oct16_4weeks.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/optimization/unified_node_model.py:163: in __init__
    self._preprocess_initial_inventory()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <src.optimization.unified_node_model.UnifiedNodeModel object at 0x7fbe12615590>

    def _preprocess_initial_inventory(self) -> None:
        """Preprocess initial_inventory to consistent 4-tuple format.
    
        UI passes: {(node, prod): qty}
        Model needs: {(node, prod, prod_date, state): qty}
    
        Converts 2-tuple format to 4-tuple format by:
        1. Setting prod_date to ONE DAY BEFORE inventory_snapshot_date (or planning start)
           This ensures initial inventory is clearly marked as pre-existing, not produced on Day 1
        2. Determining state based on node storage_mode
        """
        if not self.initial_inventory:
            return
    
        # Check format by inspecting first key
>       first_key = next(iter(self.initial_inventory.keys()))
                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'InventorySnapshot' object has no attribute 'keys'

src/optimization/unified_node_model.py:183: AttributeError
=============================== warnings summary ===============================
venv/lib/python3.11/site-packages/pydantic/_internal/_config.py:323
venv/lib/python3.11/site-packages/pydantic/_internal/_config.py:323
venv/lib/python3.11/site-packages/pydantic/_internal/_config.py:323
venv/lib/python3.11/site-packages/pydantic/_internal/_config.py:323
venv/lib/python3.11/site-packages/pydantic/_internal/_config.py:323
venv/lib/python3.11/site-packages/pydantic/_internal/_config.py:323
venv/lib/python3.11/site-packages/pydantic/_internal/_config.py:323
venv/lib/python3.11/site-packages/pydantic/_internal/_config.py:323
  /home/sverzijl/planning_latest/venv/lib/python3.11/site-packages/pydantic/_internal/_config.py:323: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    warnings.warn(DEPRECATION_MESSAGE, DeprecationWarning)

tests/test_production_run_oct16_4weeks.py::test_exact_user_scenario_oct16_4weeks
  /home/sverzijl/planning_latest/src/parsers/inventory_parser.py:167: UserWarning: Found 8 negative quantity values. These were set to 0.
    warnings.warn(

tests/test_production_run_oct16_4weeks.py::test_exact_user_scenario_oct16_4weeks
  /home/sverzijl/planning_latest/src/parsers/inventory_parser.py:173: UserWarning: Skipped 39 entries with Storage Location 5000 (excluded from inventory).
    warnings.warn(

tests/test_production_run_oct16_4weeks.py::test_exact_user_scenario_oct16_4weeks
  /home/sverzijl/planning_latest/src/optimization/unified_node_model.py:288: UserWarning: Zero cost parameters detected: All route transport costs are 0, ambient storage costs are 0. This may cause solver to leave some variables uninitialized (valid behavior). Consider using small non-zero costs (e.g., 0.0001) if you encounter solution extraction issues.
    warnings.warn(warning_msg, UserWarning)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tests/test_production_run_oct16_4weeks.py::test_exact_user_scenario_oct16_4weeks
======================== 1 failed, 11 warnings in 5.41s ========================
